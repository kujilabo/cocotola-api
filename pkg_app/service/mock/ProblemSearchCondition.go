// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kujilabo/cocotola-api/pkg_app/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ProblemSearchCondition is an autogenerated mock type for the ProblemSearchCondition type
type ProblemSearchCondition struct {
	mock.Mock
}

// GetKeyword provides a mock function with given fields:
func (_m *ProblemSearchCondition) GetKeyword() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPageNo provides a mock function with given fields:
func (_m *ProblemSearchCondition) GetPageNo() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPageSize provides a mock function with given fields:
func (_m *ProblemSearchCondition) GetPageSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetWorkbookID provides a mock function with given fields:
func (_m *ProblemSearchCondition) GetWorkbookID() domain.WorkbookID {
	ret := _m.Called()

	var r0 domain.WorkbookID
	if rf, ok := ret.Get(0).(func() domain.WorkbookID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.WorkbookID)
	}

	return r0
}

// NewProblemSearchCondition creates a new instance of ProblemSearchCondition. It also registers a cleanup function to assert the mocks expectations.
func NewProblemSearchCondition(t testing.TB) *ProblemSearchCondition {
	mock := &ProblemSearchCondition{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
