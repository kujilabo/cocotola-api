// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-api/pkg_app/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-api/pkg_app/service"

	testing "testing"
)

// ProblemRepository is an autogenerated mock type for the ProblemRepository type
type ProblemRepository struct {
	mock.Mock
}

// AddProblem provides a mock function with given fields: ctx, operator, param
func (_m *ProblemRepository) AddProblem(ctx context.Context, operator domain.StudentModel, param service.ProblemAddParameter) (domain.ProblemID, error) {
	ret := _m.Called(ctx, operator, param)

	var r0 domain.ProblemID
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemAddParameter) domain.ProblemID); ok {
		r0 = rf(ctx, operator, param)
	} else {
		r0 = ret.Get(0).(domain.ProblemID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemAddParameter) error); ok {
		r1 = rf(ctx, operator, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllProblems provides a mock function with given fields: ctx, operator, workbookID
func (_m *ProblemRepository) FindAllProblems(ctx context.Context, operator domain.StudentModel, workbookID domain.WorkbookID) (service.ProblemSearchResult, error) {
	ret := _m.Called(ctx, operator, workbookID)

	var r0 service.ProblemSearchResult
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, domain.WorkbookID) service.ProblemSearchResult); ok {
		r0 = rf(ctx, operator, workbookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, domain.WorkbookID) error); ok {
		r1 = rf(ctx, operator, workbookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblemByID provides a mock function with given fields: ctx, operator, id
func (_m *ProblemRepository) FindProblemByID(ctx context.Context, operator domain.StudentModel, id service.ProblemSelectParameter1) (service.Problem, error) {
	ret := _m.Called(ctx, operator, id)

	var r0 service.Problem
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter1) service.Problem); ok {
		r0 = rf(ctx, operator, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Problem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter1) error); ok {
		r1 = rf(ctx, operator, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblemIDs provides a mock function with given fields: ctx, operator, workbookID
func (_m *ProblemRepository) FindProblemIDs(ctx context.Context, operator domain.StudentModel, workbookID domain.WorkbookID) ([]domain.ProblemID, error) {
	ret := _m.Called(ctx, operator, workbookID)

	var r0 []domain.ProblemID
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, domain.WorkbookID) []domain.ProblemID); ok {
		r0 = rf(ctx, operator, workbookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProblemID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, domain.WorkbookID) error); ok {
		r1 = rf(ctx, operator, workbookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblems provides a mock function with given fields: ctx, operator, param
func (_m *ProblemRepository) FindProblems(ctx context.Context, operator domain.StudentModel, param service.ProblemSearchCondition) (service.ProblemSearchResult, error) {
	ret := _m.Called(ctx, operator, param)

	var r0 service.ProblemSearchResult
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemSearchCondition) service.ProblemSearchResult); ok {
		r0 = rf(ctx, operator, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemSearchCondition) error); ok {
		r1 = rf(ctx, operator, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblemsByCustomCondition provides a mock function with given fields: ctx, operator, condition
func (_m *ProblemRepository) FindProblemsByCustomCondition(ctx context.Context, operator domain.StudentModel, condition interface{}) ([]domain.ProblemModel, error) {
	ret := _m.Called(ctx, operator, condition)

	var r0 []domain.ProblemModel
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, interface{}) []domain.ProblemModel); ok {
		r0 = rf(ctx, operator, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProblemModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, interface{}) error); ok {
		r1 = rf(ctx, operator, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblemsByProblemIDs provides a mock function with given fields: ctx, operator, param
func (_m *ProblemRepository) FindProblemsByProblemIDs(ctx context.Context, operator domain.StudentModel, param service.ProblemIDsCondition) (service.ProblemSearchResult, error) {
	ret := _m.Called(ctx, operator, param)

	var r0 service.ProblemSearchResult
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemIDsCondition) service.ProblemSearchResult); ok {
		r0 = rf(ctx, operator, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemIDsCondition) error); ok {
		r1 = rf(ctx, operator, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveProblem provides a mock function with given fields: ctx, operator, id
func (_m *ProblemRepository) RemoveProblem(ctx context.Context, operator domain.StudentModel, id service.ProblemSelectParameter2) error {
	ret := _m.Called(ctx, operator, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2) error); ok {
		r0 = rf(ctx, operator, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProblem provides a mock function with given fields: ctx, operator, id, param
func (_m *ProblemRepository) UpdateProblem(ctx context.Context, operator domain.StudentModel, id service.ProblemSelectParameter2, param service.ProblemUpdateParameter) error {
	ret := _m.Called(ctx, operator, id, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2, service.ProblemUpdateParameter) error); ok {
		r0 = rf(ctx, operator, id, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProblemRepository creates a new instance of ProblemRepository. It also registers a cleanup function to assert the mocks expectations.
func NewProblemRepository(t testing.TB) *ProblemRepository {
	mock := &ProblemRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
