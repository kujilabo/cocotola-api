// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-api/pkg_app/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-api/pkg_app/service"

	testing "testing"
)

// UserQuotaRepository is an autogenerated mock type for the UserQuotaRepository type
type UserQuotaRepository struct {
	mock.Mock
}

// Increment provides a mock function with given fields: ctx, operator, name, unit, limit, count
func (_m *UserQuotaRepository) Increment(ctx context.Context, operator domain.StudentModel, name string, unit service.QuotaUnit, limit int, count int) (bool, error) {
	ret := _m.Called(ctx, operator, name, unit, limit, count)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, string, service.QuotaUnit, int, int) bool); ok {
		r0 = rf(ctx, operator, name, unit, limit, count)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, string, service.QuotaUnit, int, int) error); ok {
		r1 = rf(ctx, operator, name, unit, limit, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExceeded provides a mock function with given fields: ctx, operator, name, unit, limit
func (_m *UserQuotaRepository) IsExceeded(ctx context.Context, operator domain.StudentModel, name string, unit service.QuotaUnit, limit int) (bool, error) {
	ret := _m.Called(ctx, operator, name, unit, limit)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, string, service.QuotaUnit, int) bool); ok {
		r0 = rf(ctx, operator, name, unit, limit)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, string, service.QuotaUnit, int) error); ok {
		r1 = rf(ctx, operator, name, unit, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserQuotaRepository creates a new instance of UserQuotaRepository. It also registers a cleanup function to assert the mocks expectations.
func NewUserQuotaRepository(t testing.TB) *UserQuotaRepository {
	mock := &UserQuotaRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
