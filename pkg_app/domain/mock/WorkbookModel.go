// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kujilabo/cocotola-api/pkg_app/domain"
	mock "github.com/stretchr/testify/mock"

	pkg_userdomain "github.com/kujilabo/cocotola-api/pkg_user/domain"

	testing "testing"

	time "time"
)

// WorkbookModel is an autogenerated mock type for the WorkbookModel type
type WorkbookModel struct {
	mock.Mock
}

// GetCreatedAt provides a mock function with given fields:
func (_m *WorkbookModel) GetCreatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetCreatedBy provides a mock function with given fields:
func (_m *WorkbookModel) GetCreatedBy() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *WorkbookModel) GetID() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetLang provides a mock function with given fields:
func (_m *WorkbookModel) GetLang() domain.Lang2 {
	ret := _m.Called()

	var r0 domain.Lang2
	if rf, ok := ret.Get(0).(func() domain.Lang2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Lang2)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *WorkbookModel) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOwnerID provides a mock function with given fields:
func (_m *WorkbookModel) GetOwnerID() pkg_userdomain.AppUserID {
	ret := _m.Called()

	var r0 pkg_userdomain.AppUserID
	if rf, ok := ret.Get(0).(func() pkg_userdomain.AppUserID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pkg_userdomain.AppUserID)
	}

	return r0
}

// GetProblemType provides a mock function with given fields:
func (_m *WorkbookModel) GetProblemType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetProperties provides a mock function with given fields:
func (_m *WorkbookModel) GetProperties() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetQuestionText provides a mock function with given fields:
func (_m *WorkbookModel) GetQuestionText() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSpaceID provides a mock function with given fields:
func (_m *WorkbookModel) GetSpaceID() pkg_userdomain.SpaceID {
	ret := _m.Called()

	var r0 pkg_userdomain.SpaceID
	if rf, ok := ret.Get(0).(func() pkg_userdomain.SpaceID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pkg_userdomain.SpaceID)
	}

	return r0
}

// GetUpdatedAt provides a mock function with given fields:
func (_m *WorkbookModel) GetUpdatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetUpdatedBy provides a mock function with given fields:
func (_m *WorkbookModel) GetUpdatedBy() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *WorkbookModel) GetVersion() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// HasPrivilege provides a mock function with given fields: privilege
func (_m *WorkbookModel) HasPrivilege(privilege pkg_userdomain.RBACAction) bool {
	ret := _m.Called(privilege)

	var r0 bool
	if rf, ok := ret.Get(0).(func(pkg_userdomain.RBACAction) bool); ok {
		r0 = rf(privilege)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewWorkbookModel creates a new instance of WorkbookModel. It also registers a cleanup function to assert the mocks expectations.
func NewWorkbookModel(t testing.TB) *WorkbookModel {
	mock := &WorkbookModel{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
