// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	commondomain "github.com/kujilabo/cocotola-api/src/plugin/common/domain"

	domain "github.com/kujilabo/cocotola-api/src/app/domain"

	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-api/src/plugin/common/service"

	testing "testing"
)

// TranslatorClient is an autogenerated mock type for the TranslatorClient type
type TranslatorClient struct {
	mock.Mock
}

// AddTranslation provides a mock function with given fields: ctx, param
func (_m *TranslatorClient) AddTranslation(ctx context.Context, param service.TranslationAddParameter) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.TranslationAddParameter) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DictionaryLookup provides a mock function with given fields: ctx, fromLang, toLang, text
func (_m *TranslatorClient) DictionaryLookup(ctx context.Context, fromLang domain.Lang2, toLang domain.Lang2, text string) ([]commondomain.Translation, error) {
	ret := _m.Called(ctx, fromLang, toLang, text)

	var r0 []commondomain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, domain.Lang2, string) []commondomain.Translation); ok {
		r0 = rf(ctx, fromLang, toLang, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commondomain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, domain.Lang2, string) error); ok {
		r1 = rf(ctx, fromLang, toLang, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DictionaryLookupWithPos provides a mock function with given fields: ctx, fromLang, toLang, text, pos
func (_m *TranslatorClient) DictionaryLookupWithPos(ctx context.Context, fromLang domain.Lang2, toLang domain.Lang2, text string, pos commondomain.WordPos) (commondomain.Translation, error) {
	ret := _m.Called(ctx, fromLang, toLang, text, pos)

	var r0 commondomain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, domain.Lang2, string, commondomain.WordPos) commondomain.Translation); ok {
		r0 = rf(ctx, fromLang, toLang, text, pos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commondomain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, domain.Lang2, string, commondomain.WordPos) error); ok {
		r1 = rf(ctx, fromLang, toLang, text, pos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTranslationByTextAndPos provides a mock function with given fields: ctx, lang2, text, pos
func (_m *TranslatorClient) FindTranslationByTextAndPos(ctx context.Context, lang2 domain.Lang2, text string, pos commondomain.WordPos) (commondomain.Translation, error) {
	ret := _m.Called(ctx, lang2, text, pos)

	var r0 commondomain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string, commondomain.WordPos) commondomain.Translation); ok {
		r0 = rf(ctx, lang2, text, pos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commondomain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, string, commondomain.WordPos) error); ok {
		r1 = rf(ctx, lang2, text, pos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTranslationsByFirstLetter provides a mock function with given fields: ctx, lang2, firstLetter
func (_m *TranslatorClient) FindTranslationsByFirstLetter(ctx context.Context, lang2 domain.Lang2, firstLetter string) ([]commondomain.Translation, error) {
	ret := _m.Called(ctx, lang2, firstLetter)

	var r0 []commondomain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string) []commondomain.Translation); ok {
		r0 = rf(ctx, lang2, firstLetter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commondomain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, string) error); ok {
		r1 = rf(ctx, lang2, firstLetter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTranslationsByText provides a mock function with given fields: ctx, lang2, text
func (_m *TranslatorClient) FindTranslationsByText(ctx context.Context, lang2 domain.Lang2, text string) ([]commondomain.Translation, error) {
	ret := _m.Called(ctx, lang2, text)

	var r0 []commondomain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string) []commondomain.Translation); ok {
		r0 = rf(ctx, lang2, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commondomain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, string) error); ok {
		r1 = rf(ctx, lang2, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTranslation provides a mock function with given fields: ctx, lang2, text, pos
func (_m *TranslatorClient) RemoveTranslation(ctx context.Context, lang2 domain.Lang2, text string, pos commondomain.WordPos) error {
	ret := _m.Called(ctx, lang2, text, pos)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string, commondomain.WordPos) error); ok {
		r0 = rf(ctx, lang2, text, pos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTranslation provides a mock function with given fields: ctx, lang2, text, pos, param
func (_m *TranslatorClient) UpdateTranslation(ctx context.Context, lang2 domain.Lang2, text string, pos commondomain.WordPos, param service.TranslationUpdateParameter) error {
	ret := _m.Called(ctx, lang2, text, pos, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string, commondomain.WordPos, service.TranslationUpdateParameter) error); ok {
		r0 = rf(ctx, lang2, text, pos, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTranslatorClient creates a new instance of TranslatorClient. It also registers a cleanup function to assert the mocks expectations.
func NewTranslatorClient(t testing.TB) *TranslatorClient {
	mock := &TranslatorClient{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
