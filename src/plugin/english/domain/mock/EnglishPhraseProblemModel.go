// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-api/src/app/domain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	time "time"
)

// EnglishPhraseProblemModel is an autogenerated mock type for the EnglishPhraseProblemModel type
type EnglishPhraseProblemModel struct {
	mock.Mock
}

// GetAudioID provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetAudioID() domain.AudioID {
	ret := _m.Called()

	var r0 domain.AudioID
	if rf, ok := ret.Get(0).(func() domain.AudioID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.AudioID)
	}

	return r0
}

// GetCreatedAt provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetCreatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetCreatedBy provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetCreatedBy() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetID() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetLang2 provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetLang2() domain.Lang2 {
	ret := _m.Called()

	var r0 domain.Lang2
	if rf, ok := ret.Get(0).(func() domain.Lang2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Lang2)
		}
	}

	return r0
}

// GetNumber provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetNumber() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetProblemType provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetProblemType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetProperties provides a mock function with given fields: ctx
func (_m *EnglishPhraseProblemModel) GetProperties(ctx context.Context) map[string]interface{} {
	ret := _m.Called(ctx)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetText provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetText() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTranslated provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetTranslated() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUpdatedAt provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetUpdatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetUpdatedBy provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetUpdatedBy() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *EnglishPhraseProblemModel) GetVersion() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewEnglishPhraseProblemModel creates a new instance of EnglishPhraseProblemModel. It also registers a cleanup function to assert the mocks expectations.
func NewEnglishPhraseProblemModel(t testing.TB) *EnglishPhraseProblemModel {
	mock := &EnglishPhraseProblemModel{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
