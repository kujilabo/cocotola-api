// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	service "github.com/kujilabo/cocotola-api/src/app/service"
	mock "github.com/stretchr/testify/mock"
)

// ProblemQuotaProcessor is an autogenerated mock type for the ProblemQuotaProcessor type
type ProblemQuotaProcessor struct {
	mock.Mock
}

// GetLimitForSizeQuota provides a mock function with given fields:
func (_m *ProblemQuotaProcessor) GetLimitForSizeQuota() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetLimitForUpdateQuota provides a mock function with given fields:
func (_m *ProblemQuotaProcessor) GetLimitForUpdateQuota() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetUnitForSizeQuota provides a mock function with given fields:
func (_m *ProblemQuotaProcessor) GetUnitForSizeQuota() service.QuotaUnit {
	ret := _m.Called()

	var r0 service.QuotaUnit
	if rf, ok := ret.Get(0).(func() service.QuotaUnit); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(service.QuotaUnit)
	}

	return r0
}

// GetUnitForUpdateQuota provides a mock function with given fields:
func (_m *ProblemQuotaProcessor) GetUnitForUpdateQuota() service.QuotaUnit {
	ret := _m.Called()

	var r0 service.QuotaUnit
	if rf, ok := ret.Get(0).(func() service.QuotaUnit); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(service.QuotaUnit)
	}

	return r0
}

// NewProblemQuotaProcessor creates a new instance of ProblemQuotaProcessor. It also registers a cleanup function to assert the mocks expectations.
func NewProblemQuotaProcessor(t testing.TB) *ProblemQuotaProcessor {
	mock := &ProblemQuotaProcessor{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
