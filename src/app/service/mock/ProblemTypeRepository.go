// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ProblemTypeRepository is an autogenerated mock type for the ProblemTypeRepository type
type ProblemTypeRepository struct {
	mock.Mock
}

// FindAllProblemTypes provides a mock function with given fields: ctx
func (_m *ProblemTypeRepository) FindAllProblemTypes(ctx context.Context) ([]domain.ProblemType, error) {
	ret := _m.Called(ctx)

	var r0 []domain.ProblemType
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ProblemType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProblemType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProblemTypeRepository creates a new instance of ProblemTypeRepository. It also registers a cleanup function to assert the mocks expectations.
func NewProblemTypeRepository(t testing.TB) *ProblemTypeRepository {
	mock := &ProblemTypeRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
