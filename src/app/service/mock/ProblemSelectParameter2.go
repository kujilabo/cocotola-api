// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kujilabo/cocotola-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ProblemSelectParameter2 is an autogenerated mock type for the ProblemSelectParameter2 type
type ProblemSelectParameter2 struct {
	mock.Mock
}

// GetProblemID provides a mock function with given fields:
func (_m *ProblemSelectParameter2) GetProblemID() domain.ProblemID {
	ret := _m.Called()

	var r0 domain.ProblemID
	if rf, ok := ret.Get(0).(func() domain.ProblemID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.ProblemID)
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *ProblemSelectParameter2) GetVersion() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetWorkbookID provides a mock function with given fields:
func (_m *ProblemSelectParameter2) GetWorkbookID() domain.WorkbookID {
	ret := _m.Called()

	var r0 domain.WorkbookID
	if rf, ok := ret.Get(0).(func() domain.WorkbookID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.WorkbookID)
	}

	return r0
}

// NewProblemSelectParameter2 creates a new instance of ProblemSelectParameter2. It also registers a cleanup function to assert the mocks expectations.
func NewProblemSelectParameter2(t testing.TB) *ProblemSelectParameter2 {
	mock := &ProblemSelectParameter2{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
