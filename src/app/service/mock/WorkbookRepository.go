// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appdomain "github.com/kujilabo/cocotola-api/src/app/domain"

	domain "github.com/kujilabo/cocotola-api/src/user/domain"

	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-api/src/app/service"

	testing "testing"
)

// WorkbookRepository is an autogenerated mock type for the WorkbookRepository type
type WorkbookRepository struct {
	mock.Mock
}

// AddWorkbook provides a mock function with given fields: ctx, operator, spaceID, param
func (_m *WorkbookRepository) AddWorkbook(ctx context.Context, operator domain.AppUserModel, spaceID domain.SpaceID, param service.WorkbookAddParameter) (appdomain.WorkbookID, error) {
	ret := _m.Called(ctx, operator, spaceID, param)

	var r0 appdomain.WorkbookID
	if rf, ok := ret.Get(0).(func(context.Context, domain.AppUserModel, domain.SpaceID, service.WorkbookAddParameter) appdomain.WorkbookID); ok {
		r0 = rf(ctx, operator, spaceID, param)
	} else {
		r0 = ret.Get(0).(appdomain.WorkbookID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.AppUserModel, domain.SpaceID, service.WorkbookAddParameter) error); ok {
		r1 = rf(ctx, operator, spaceID, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPersonalWorkbooks provides a mock function with given fields: ctx, operator, param
func (_m *WorkbookRepository) FindPersonalWorkbooks(ctx context.Context, operator appdomain.StudentModel, param service.WorkbookSearchCondition) (service.WorkbookSearchResult, error) {
	ret := _m.Called(ctx, operator, param)

	var r0 service.WorkbookSearchResult
	if rf, ok := ret.Get(0).(func(context.Context, appdomain.StudentModel, service.WorkbookSearchCondition) service.WorkbookSearchResult); ok {
		r0 = rf(ctx, operator, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.WorkbookSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, appdomain.StudentModel, service.WorkbookSearchCondition) error); ok {
		r1 = rf(ctx, operator, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWorkbookByID provides a mock function with given fields: ctx, operator, id
func (_m *WorkbookRepository) FindWorkbookByID(ctx context.Context, operator appdomain.StudentModel, id appdomain.WorkbookID) (service.Workbook, error) {
	ret := _m.Called(ctx, operator, id)

	var r0 service.Workbook
	if rf, ok := ret.Get(0).(func(context.Context, appdomain.StudentModel, appdomain.WorkbookID) service.Workbook); ok {
		r0 = rf(ctx, operator, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Workbook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, appdomain.StudentModel, appdomain.WorkbookID) error); ok {
		r1 = rf(ctx, operator, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWorkbookByName provides a mock function with given fields: ctx, operator, spaceID, name
func (_m *WorkbookRepository) FindWorkbookByName(ctx context.Context, operator domain.AppUserModel, spaceID domain.SpaceID, name string) (service.Workbook, error) {
	ret := _m.Called(ctx, operator, spaceID, name)

	var r0 service.Workbook
	if rf, ok := ret.Get(0).(func(context.Context, domain.AppUserModel, domain.SpaceID, string) service.Workbook); ok {
		r0 = rf(ctx, operator, spaceID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Workbook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.AppUserModel, domain.SpaceID, string) error); ok {
		r1 = rf(ctx, operator, spaceID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveWorkbook provides a mock function with given fields: ctx, operator, workbookID, version
func (_m *WorkbookRepository) RemoveWorkbook(ctx context.Context, operator appdomain.StudentModel, workbookID appdomain.WorkbookID, version int) error {
	ret := _m.Called(ctx, operator, workbookID, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, appdomain.StudentModel, appdomain.WorkbookID, int) error); ok {
		r0 = rf(ctx, operator, workbookID, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWorkbook provides a mock function with given fields: ctx, operator, workbookID, version, param
func (_m *WorkbookRepository) UpdateWorkbook(ctx context.Context, operator appdomain.StudentModel, workbookID appdomain.WorkbookID, version int, param service.WorkbookUpdateParameter) error {
	ret := _m.Called(ctx, operator, workbookID, version, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, appdomain.StudentModel, appdomain.WorkbookID, int, service.WorkbookUpdateParameter) error); ok {
		r0 = rf(ctx, operator, workbookID, version, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWorkbookRepository creates a new instance of WorkbookRepository. It also registers a cleanup function to assert the mocks expectations.
func NewWorkbookRepository(t testing.TB) *WorkbookRepository {
	mock := &WorkbookRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
