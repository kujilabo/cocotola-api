// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-api/src/app/service"

	testing "testing"

	userdomain "github.com/kujilabo/cocotola-api/src/user/domain"
)

// SystemStudent is an autogenerated mock type for the SystemStudent type
type SystemStudent struct {
	mock.Mock
}

// AddWorkbookToSystemSpace provides a mock function with given fields: ctx, parameter
func (_m *SystemStudent) AddWorkbookToSystemSpace(ctx context.Context, parameter service.WorkbookAddParameter) (domain.WorkbookID, error) {
	ret := _m.Called(ctx, parameter)

	var r0 domain.WorkbookID
	if rf, ok := ret.Get(0).(func(context.Context, service.WorkbookAddParameter) domain.WorkbookID); ok {
		r0 = rf(ctx, parameter)
	} else {
		r0 = ret.Get(0).(domain.WorkbookID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.WorkbookAddParameter) error); ok {
		r1 = rf(ctx, parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWorkbookFromSystemSpace provides a mock function with given fields: ctx, name
func (_m *SystemStudent) FindWorkbookFromSystemSpace(ctx context.Context, name string) (service.Workbook, error) {
	ret := _m.Called(ctx, name)

	var r0 service.Workbook
	if rf, ok := ret.Get(0).(func(context.Context, string) service.Workbook); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Workbook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetID provides a mock function with given fields:
func (_m *SystemStudent) GetID() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetLoginID provides a mock function with given fields:
func (_m *SystemStudent) GetLoginID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOrganizationID provides a mock function with given fields:
func (_m *SystemStudent) GetOrganizationID() userdomain.OrganizationID {
	ret := _m.Called()

	var r0 userdomain.OrganizationID
	if rf, ok := ret.Get(0).(func() userdomain.OrganizationID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(userdomain.OrganizationID)
	}

	return r0
}

// GetProperties provides a mock function with given fields:
func (_m *SystemStudent) GetProperties() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetRoles provides a mock function with given fields:
func (_m *SystemStudent) GetRoles() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetUsername provides a mock function with given fields:
func (_m *SystemStudent) GetUsername() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewSystemStudent creates a new instance of SystemStudent. It also registers a cleanup function to assert the mocks expectations.
func NewSystemStudent(t testing.TB) *SystemStudent {
	mock := &SystemStudent{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
