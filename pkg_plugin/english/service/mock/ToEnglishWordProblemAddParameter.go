// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-api/pkg_app/service"

	testing "testing"
)

// ToEnglishWordProblemAddParameter is an autogenerated mock type for the ToEnglishWordProblemAddParameter type
type ToEnglishWordProblemAddParameter struct {
	mock.Mock
}

// Run provides a mock function with given fields: ctx
func (_m *ToEnglishWordProblemAddParameter) Run(ctx context.Context) ([]service.ProblemAddParameter, error) {
	ret := _m.Called(ctx)

	var r0 []service.ProblemAddParameter
	if rf, ok := ret.Get(0).(func(context.Context) []service.ProblemAddParameter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.ProblemAddParameter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewToEnglishWordProblemAddParameter creates a new instance of ToEnglishWordProblemAddParameter. It also registers a cleanup function to assert the mocks expectations.
func NewToEnglishWordProblemAddParameter(t testing.TB) *ToEnglishWordProblemAddParameter {
	mock := &ToEnglishWordProblemAddParameter{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
