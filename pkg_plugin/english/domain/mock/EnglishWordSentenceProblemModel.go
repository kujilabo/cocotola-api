// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kujilabo/cocotola-api/pkg_app/domain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// EnglishWordSentenceProblemModel is an autogenerated mock type for the EnglishWordSentenceProblemModel type
type EnglishWordSentenceProblemModel struct {
	mock.Mock
}

// GetAudioID provides a mock function with given fields:
func (_m *EnglishWordSentenceProblemModel) GetAudioID() domain.AudioID {
	ret := _m.Called()

	var r0 domain.AudioID
	if rf, ok := ret.Get(0).(func() domain.AudioID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.AudioID)
	}

	return r0
}

// GetLang2 provides a mock function with given fields:
func (_m *EnglishWordSentenceProblemModel) GetLang2() domain.Lang2 {
	ret := _m.Called()

	var r0 domain.Lang2
	if rf, ok := ret.Get(0).(func() domain.Lang2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Lang2)
		}
	}

	return r0
}

// GetNote provides a mock function with given fields:
func (_m *EnglishWordSentenceProblemModel) GetNote() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetProvider provides a mock function with given fields:
func (_m *EnglishWordSentenceProblemModel) GetProvider() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetText provides a mock function with given fields:
func (_m *EnglishWordSentenceProblemModel) GetText() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTranslated provides a mock function with given fields:
func (_m *EnglishWordSentenceProblemModel) GetTranslated() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewEnglishWordSentenceProblemModel creates a new instance of EnglishWordSentenceProblemModel. It also registers a cleanup function to assert the mocks expectations.
func NewEnglishWordSentenceProblemModel(t testing.TB) *EnglishWordSentenceProblemModel {
	mock := &EnglishWordSentenceProblemModel{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
