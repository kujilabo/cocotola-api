// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-api/pkg_plugin/common/service"

	testing "testing"
)

// TatoebaClient is an autogenerated mock type for the TatoebaClient type
type TatoebaClient struct {
	mock.Mock
}

// FindSentenceBySentenceNumber provides a mock function with given fields: ctx, sentenceNumber
func (_m *TatoebaClient) FindSentenceBySentenceNumber(ctx context.Context, sentenceNumber int) (service.TatoebaSentence, error) {
	ret := _m.Called(ctx, sentenceNumber)

	var r0 service.TatoebaSentence
	if rf, ok := ret.Get(0).(func(context.Context, int) service.TatoebaSentence); ok {
		r0 = rf(ctx, sentenceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.TatoebaSentence)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, sentenceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSentencePairs provides a mock function with given fields: ctx, param
func (_m *TatoebaClient) FindSentencePairs(ctx context.Context, param service.TatoebaSentenceSearchCondition) (*service.TatoebaSentencePairSearchResult, error) {
	ret := _m.Called(ctx, param)

	var r0 *service.TatoebaSentencePairSearchResult
	if rf, ok := ret.Get(0).(func(context.Context, service.TatoebaSentenceSearchCondition) *service.TatoebaSentencePairSearchResult); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TatoebaSentencePairSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.TatoebaSentenceSearchCondition) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportLinks provides a mock function with given fields: ctx, reader
func (_m *TatoebaClient) ImportLinks(ctx context.Context, reader io.Reader) error {
	ret := _m.Called(ctx, reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) error); ok {
		r0 = rf(ctx, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImportSentences provides a mock function with given fields: ctx, reader
func (_m *TatoebaClient) ImportSentences(ctx context.Context, reader io.Reader) error {
	ret := _m.Called(ctx, reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) error); ok {
		r0 = rf(ctx, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTatoebaClient creates a new instance of TatoebaClient. It also registers a cleanup function to assert the mocks expectations.
func NewTatoebaClient(t testing.TB) *TatoebaClient {
	mock := &TatoebaClient{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
