// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kujilabo/cocotola-api/pkg_user/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	time "time"
)

// SpaceModel is an autogenerated mock type for the SpaceModel type
type SpaceModel struct {
	mock.Mock
}

// GetCreatedAt provides a mock function with given fields:
func (_m *SpaceModel) GetCreatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetCreatedBy provides a mock function with given fields:
func (_m *SpaceModel) GetCreatedBy() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetDescription provides a mock function with given fields:
func (_m *SpaceModel) GetDescription() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *SpaceModel) GetID() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetKey provides a mock function with given fields:
func (_m *SpaceModel) GetKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *SpaceModel) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOrganizationID provides a mock function with given fields:
func (_m *SpaceModel) GetOrganizationID() domain.OrganizationID {
	ret := _m.Called()

	var r0 domain.OrganizationID
	if rf, ok := ret.Get(0).(func() domain.OrganizationID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.OrganizationID)
	}

	return r0
}

// GetUpdatedAt provides a mock function with given fields:
func (_m *SpaceModel) GetUpdatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetUpdatedBy provides a mock function with given fields:
func (_m *SpaceModel) GetUpdatedBy() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *SpaceModel) GetVersion() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewSpaceModel creates a new instance of SpaceModel. It also registers a cleanup function to assert the mocks expectations.
func NewSpaceModel(t testing.TB) *SpaceModel {
	mock := &SpaceModel{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
